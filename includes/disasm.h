
#ifndef _DISASM_H
# define _DISASM_H

# include "disassemble.h"
# include <sys/types.h>
# include <stdint.h>
# include <stdbool.h>

size_t	 	disasm_length(const void *code, size_t codelen);

# define REG_PACK(xreg, reg)		(((xreg) | (reg)) & 0b1111)
# define OP_PACK(reg, ext, stat)	(stat | ((ext & 0b111) << 3) | (reg & 0b111))

# define EDISASM_LENGTH		0
# define EDISASM_INSTRUCTION	false

# define BYTE			0b00000001 /* 1  byte */
# define WORD			0b00000010 /* 2  byte */
# define DWORD			0b00000100 /* 4  byte */
# define PWORD			0b00001000 /* 6  byte */
# define QWORD			0b00010000 /* 8  byte */
# define TWORD			0b00100000 /* 10 byte */

# define OP_PREFIX_0F		0b00000001
# define OP_PREFIX_66		0b00000010
# define OP_PREFIX_F2		0b00000100
# define OP_PREFIX_F3		0b00001000
# define OP_PREFIX_9B		0b00010000

# define OP_0F			OP_PREFIX_0F
# define OP_F3			OP_PREFIX_F3
# define OP_9B			OP_PREFIX_9B
# define OP_660F		(OP_PREFIX_66 | OP_PREFIX_0F)
# define OP_F20F		(OP_PREFIX_F2 | OP_PREFIX_0F)
# define OP_F30F		(OP_PREFIX_F3 | OP_PREFIX_0F)

# define MODRM			0b00000001
# define EXT			0b00000010
# define REX			0b00000100
# define TEST_F6		0b00001000
# define TEST_F7		0b00010000
# define KEEP_SRC		0b00100000
# define KEEP_DST		0b01000000
# define IMPLICIT		0b10000000
# define TEST			(TEST_F6 | TEST_F7)

# define TABLESIZE		8

# define BITMASK32(                                                             \
    b00,b01,b02,b03,b04,b05,b06,b07,                                           \
    b08,b09,b0a,b0b,b0c,b0d,b0e,b0f,                                           \
    b10,b11,b12,b13,b14,b15,b16,b17,                                           \
    b18,b19,b1a,b1b,b1c,b1d,b1e,b1f                                            \
) (                                                                            \
    (b00<<0x00)|(b01<<0x01)|(b02<<0x02)|(b03<<0x03)|                           \
    (b04<<0x04)|(b05<<0x05)|(b06<<0x06)|(b07<<0x07)|                           \
    (b08<<0x08)|(b09<<0x09)|(b0a<<0x0a)|(b0b<<0x0b)|                           \
    (b0c<<0x0c)|(b0d<<0x0d)|(b0e<<0x0e)|(b0f<<0x0f)|                           \
    (b10<<0x10)|(b11<<0x11)|(b12<<0x12)|(b13<<0x13)|                           \
    (b14<<0x14)|(b15<<0x15)|(b16<<0x16)|(b17<<0x17)|                           \
    (b18<<0x18)|(b19<<0x19)|(b1a<<0x1a)|(b1b<<0x1b)|                           \
    (b1c<<0x1c)|(b1d<<0x1d)|(b1e<<0x1e)|(b1f<<0x1f)                            \
)

# define CHECK_TABLE(t, v)   	((t[(v)>>5]>>((v)&0x1f))&1)

/*
**
**               The following tables have the same values as
**               the tables declared in <disasm_length>.
**
**               Because assigning the values all at once doesn't
**               make them position independent
**               another method has to be used.
**
**               Therefore below tables are used as a reference.
**
*/


/*******************************************************************************
*****                            1 byte opcode                             *****
*******************************************************************************/

/*                                                                            **
**                  1 byte opcodes with MOD/RM (extension)                    **
**                                                                            */

// static const uint32_t		table_opcode_modrm_ext[] =
// {
// 	       /* 0 1 2 3 4 5 6 7  8 9 a b c d e f */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 0 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 1 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 2 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 3 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 4 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 5 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 6 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 7 */
// 	BITMASK32(1,1,1,1,0,0,0,0, 0,0,0,0,0,0,0,1,  /* 8 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 9 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* a */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* b */
// 	BITMASK32(1,1,0,0,0,0,1,1, 0,0,0,0,0,0,0,0,  /* c */
// 		  1,1,1,1,0,0,0,0, 1,1,1,1,1,1,1,1), /* d */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* e */
// 		  0,0,0,0,0,0,1,1, 0,0,0,0,0,0,1,1)  /* f */
// };

/*                                                                            **
**                  1 byte opcodes with MOD/RM (no extension)                 **
**                                                                            */

// static const uint32_t		table_opcode_modrm_noext[] =
// {
// 	       /* 0 1 2 3 4 5 6 7  8 9 a b c d e f */
// 	BITMASK32(1,1,1,1,0,0,0,0, 1,1,1,1,0,0,0,0,  /* 0 */
// 		  1,1,1,1,0,0,0,0, 1,1,1,1,0,0,0,0), /* 1 */
// 	BITMASK32(1,1,1,1,0,0,0,0, 1,1,1,1,0,0,0,0,  /* 2 */
// 		  1,1,1,1,0,0,0,0, 1,1,1,1,0,0,0,0), /* 3 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 4 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 5 */
// 	BITMASK32(0,0,1,1,0,0,0,0, 0,1,0,1,0,0,0,0,  /* 6 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 7 */
// 	BITMASK32(0,0,0,0,1,1,1,1, 1,1,1,1,1,1,1,0,  /* 8 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 9 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* a */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* b */
// 	BITMASK32(0,0,0,0,1,1,0,0, 0,0,0,0,0,0,0,0,  /* c */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* d */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* e */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0)  /* f */
// };

/*                                                                            **
**                      1 byte opcodes with immediate 8                       **
**                                                                            */

// static const uint32_t		table_opcode_imm8[] =
// {
// 	       /* 0 1 2 3 4 5 6 7  8 9 a b c d e f */
// 	BITMASK32(0,0,0,0,1,0,0,0, 0,0,0,0,1,0,0,0,  /* 0 */
// 		  0,0,0,0,1,0,0,0, 0,0,0,0,1,0,0,0), /* 1 */
// 	BITMASK32(0,0,0,0,1,0,0,0, 0,0,0,0,1,0,0,0,  /* 2 */
// 		  0,0,0,0,1,0,0,0, 0,0,0,0,1,0,0,0), /* 3 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 4 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 5 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,1,1,0,0,0,0,  /* 6 */
// 		  1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1), /* 7 */
// 	BITMASK32(1,0,1,1,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 8 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 9 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,  /* a */
// 		  1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0), /* b */
// 	BITMASK32(1,1,0,0,0,0,1,0, 1,0,0,0,0,1,0,0,  /* c */
// 		  0,0,0,0,1,1,0,0, 0,0,0,0,0,0,0,0), /* d */
// 	BITMASK32(1,1,1,1,1,1,1,1, 0,0,0,1,0,0,0,0,  /* e */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0)  /* f */
// };

/*                                                                            **
**                      1 byte opcodes with memory 16                         **
**                                                                            */

// static const uint32_t		table_opcode_imm16[] =
// {
// 	       /* 0 1 2 3 4 5 6 7  8 9 a b c d e f */
// 	BITMASK32(0,0,0,0,0,1,0,0, 0,0,0,0,0,1,0,0,  /* 0 */
// 		  0,0,0,0,0,1,0,0, 0,0,0,0,0,1,0,0), /* 1 */
// 	BITMASK32(0,0,0,0,0,1,0,0, 0,0,0,0,0,1,0,0,  /* 2 */
// 		  0,0,0,0,0,1,0,0, 0,0,0,0,0,1,0,0), /* 3 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 4 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 5 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 1,1,0,0,0,0,0,0,  /* 6 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 7 */
// 	BITMASK32(0,1,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 8 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 9 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,1,0,0,0,0,0,0,  /* a */
// 		  0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1), /* b */
// 	BITMASK32(0,0,1,0,0,0,0,1, 1,0,1,0,0,0,0,0,  /* c */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* d */
// 	BITMASK32(0,0,0,0,0,0,0,0, 1,1,0,0,0,0,0,0,  /* e */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0)  /* f */
// };

/*                                                                            **
**                      1 byte opcodes with memory 32                         **
**                                                                            */

// static const uint32_t		table_opcode_imm32[] =
// {
// 	       /* 0 1 2 3 4 5 6 7  8 9 a b c d e f */
// 	BITMASK32(0,0,0,0,0,1,0,0, 0,0,0,0,0,1,0,0,  /* 0 */
// 		  0,0,0,0,0,1,0,0, 0,0,0,0,0,1,0,0), /* 1 */
// 	BITMASK32(0,0,0,0,0,1,0,0, 0,0,0,0,0,1,0,0,  /* 2 */
// 		  0,0,0,0,0,1,0,0, 0,0,0,0,0,1,0,0), /* 3 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 4 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 5 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 1,1,0,0,0,0,0,0,  /* 6 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 7 */
// 	BITMASK32(0,1,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 8 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 9 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,1,0,0,0,0,0,0,  /* a */
// 		  0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1), /* b */
// 	BITMASK32(0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,  /* c */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* d */
// 	BITMASK32(0,0,0,0,0,0,0,0, 1,1,0,0,0,0,0,0,  /* e */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0)  /* f */
// };

/*                                                                            **
**                      1 byte opcodes with memory 16/32                      **
**                                                                            */

// static const uint32_t		table_opcode_mem16_32[] =
// {
// 	       /* 0 1 2 3 4 5 6 7  8 9 a b c d e f */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 0 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 1 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 2 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 3 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 4 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 5 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 6 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 7 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 8 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 9 */
// 	BITMASK32(1,1,1,1,0,0,0,0, 0,0,0,0,0,0,0,0,  /* a */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* b */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* c */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* d */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* e */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0)  /* f */
// };

/*******************************************************************************
*****                            2 byte opcode                             *****
*******************************************************************************/

// static const uint32_t		table_0f_opcode_modrm_noext[] =
// {
// 	       /* 0 1 2 3 4 5 6 7  8 9 a b c d e f */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 0 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 1 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 2 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 3 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 4 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 5 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 6 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 7 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 8 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 9 */
// 	BITMASK32(0,0,0,1,1,1,0,0, 0,0,0,1,1,1,0,1,  /* a */
// 		  1,1,1,1,1,1,1,1, 0,0,0,1,1,1,1,1), /* b */
// 	BITMASK32(1,1,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* c */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* d */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* e */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0)  /* f */
// };

// static const uint32_t		table_0f_opcode_modrm_ext[] =
// {
// 	       /* 0 1 2 3 4 5 6 7  8 9 a b c d e f */
// 	BITMASK32(1,1,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 0 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 1 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 2 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 3 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 4 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 5 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 6 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 7 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 8 */
// 		  1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1), /* 9 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* a */
// 		  0,0,0,0,0,0,0,0, 0,0,1,0,0,0,0,0), /* b */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* c */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* d */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* e */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0)  /* f */
// };

// static const uint32_t		table_0f_opcode_single[] =
// {
// 	       /* 0 1 2 3 4 5 6 7  8 9 a b c d e f */
// 	BITMASK32(0,0,0,0,0,0,1,0, 1,1,1,1,0,0,0,0,  /* 0 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 1 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 2 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 3 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 4 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 5 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 6 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 7 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 8 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 9 */
// 	BITMASK32(1,1,1,0,0,0,0,0, 1,1,1,0,0,0,0,0,  /* a */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* b */
// 	BITMASK32(0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,  /* c */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* d */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* e */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0)  /* f */
// };

// static const uint32_t		table_0f_opcode_imm8[] =
// {
// 	       /* 0 1 2 3 4 5 6 7  8 9 a b c d e f */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 0 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 1 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 2 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 3 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 4 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 5 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 6 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 7 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 8 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 9 */
// 	BITMASK32(0,0,0,0,1,0,0,0, 0,0,0,0,1,0,0,0,  /* a */
// 		  0,0,0,0,0,0,0,0, 0,0,1,0,0,0,0,0), /* b */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* c */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* d */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* e */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0)  /* f */
// };

// static const uint32_t		table_0f_opcode_imm16_32[] =
// {
// 	       /* 0 1 2 3 4 5 6 7  8 9 a b c d e f */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 0 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 1 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 2 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 3 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 4 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 5 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 6 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 7 */
// 	BITMASK32(1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,  /* 8 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 9 */
// 	BITMASK32(0,0,0,0,1,0,0,0, 0,0,0,0,1,0,0,0,  /* a */
// 		  0,0,0,0,0,0,0,0, 0,0,1,0,0,0,0,0), /* b */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* c */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* d */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* e */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0)  /* f */
// };

/*******************************************************************************
*****                            2 byte opcode                             *****
*******************************************************************************/


// static const uint32_t		table_9b_opcode_modrm_ext[] =
// {
// 	       /* 0 1 2 3 4 5 6 7  8 9 a b c d e f */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 0 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 1 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 2 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 3 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 4 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 5 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 6 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 7 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 8 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 9 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* a */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* b */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* c */
// 		  0,0,0,0,0,0,0,0, 0,1,0,1,0,1,0,0), /* d */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* e */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0)  /* f */
// };

/*******************************************************************************
*****                            3 byte opcode                             *****
*******************************************************************************/

// static const uint32_t		table_f20f_opcode_modrm_noext[] =
// {
// 	       /* 0 1 2 3 4 5 6 7  8 9 a b c d e f */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 0 */
// 		  1,1,1,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 1 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,1,0,1,1,0,0,  /* 2 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 3 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 4 */
// 		  1,0,0,0,0,0,0,0, 1,1,1,0,1,1,1,1), /* 5 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 6 */
// 		  1,0,0,0,0,0,0,0, 0,0,0,0,1,1,0,0), /* 7 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 8 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 9 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* a */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* b */
// 	BITMASK32(0,0,1,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* c */
// 		  1,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0), /* d */
// 	BITMASK32(0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,  /* e */
// 		  1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0)  /* f */
// };

// static const uint32_t		table_f20f_opcode_imm8[] =
// {
// 	       /* 0 1 2 3 4 5 6 7  8 9 a b c d e f */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 0 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 1 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 2 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 3 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 4 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 5 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 6 */
// 		  1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 7 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 8 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 9 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* a */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* b */
// 	BITMASK32(0,0,1,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* c */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* d */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* e */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0)  /* f */
// };

/*******************************************************************************
*****                            3 byte opcode                             *****
*******************************************************************************/

// static const uint32_t		table_f30f_opcode_modrm_noext[] =
// {
// 	       /* 0 1 2 3 4 5 6 7  8 9 a b c d e f */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 0 */
// 		  1,1,1,0,0,0,1,0, 0,0,0,0,0,0,0,0), /* 1 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,1,0,1,1,0,0,  /* 2 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 3 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 4 */
// 		  0,1,1,1,0,0,0,0, 1,1,1,1,1,1,1,1), /* 5 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,  /* 6 */
// 		  1,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,1), /* 7 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 8 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 9 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* a */
// 		  0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0), /* b */
// 	BITMASK32(0,0,1,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* c */
// 		  0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0), /* d */
// 	BITMASK32(0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,  /* e */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0)  /* f */
// };

// static const uint32_t		table_f30f_opcode_modrm_ext[] =
// {
// 	       /* 0 1 2 3 4 5 6 7  8 9 a b c d e f */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 0 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 1 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 2 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 3 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 4 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 5 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 6 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 7 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 8 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 9 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* a */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* b */
// 	BITMASK32(0,0,0,0,0,0,0,1, 0,0,0,0,0,0,0,0,  /* c */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* d */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* e */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0)  /* f */
// };

// static const uint32_t		table_f30f_opcode_imm8[] =
// {
// 	       /* 0 1 2 3 4 5 6 7  8 9 a b c d e f */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 0 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 1 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 2 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 3 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 4 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 5 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 6 */
// 		  1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 7 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 8 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 9 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* a */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* b */
// 	BITMASK32(0,0,1,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* c */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* d */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* e */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0)  /* f */
// };

/*******************************************************************************
*****                            3 byte opcode                             *****
*******************************************************************************/

// static const uint32_t		table_660f_opcode_modrm_noext[] =
// {
// 	       /* 0 1 2 3 4 5 6 7  8 9 a b c d e f */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 0 */
// 		  1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0), /* 1 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,  /* 2 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 3 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 4 */
// 		  1,1,0,0,1,1,1,1, 1,1,1,1,1,1,1,1), /* 5 */
// 	BITMASK32(1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,  /* 6 */
// 		  1,0,0,0,1,1,1,0, 0,0,0,0,1,1,1,1), /* 7 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 8 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 9 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* a */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* b */
// 	BITMASK32(0,0,1,0,1,1,1,0, 0,0,0,0,0,0,0,0,  /* c */
// 		  1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1), /* d */
// 	BITMASK32(1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,  /* e */
// 		  0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0)  /* f */
// };

// static const uint32_t		table_660f_opcode_modrm_ext[] =
// {
// 	       /* 0 1 2 3 4 5 6 7  8 9 a b c d e f */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 0 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 1 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 2 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 3 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 4 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 5 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 6 */
// 		  0,1,1,1,0,0,0,0, 0,0,0,0,0,0,0,0), /* 7 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 8 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 9 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* a */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* b */
// 	BITMASK32(0,0,0,0,0,0,0,1, 0,0,0,0,0,0,0,0,  /* c */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* d */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* e */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0)  /* f */
// };

// static const uint32_t		table_660f_opcode_imm8[] =
// {
// 	       /* 0 1 2 3 4 5 6 7  8 9 a b c d e f */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 0 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 1 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 2 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 3 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 4 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 5 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 6 */
// 		  1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 7 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 8 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 9 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* a */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* b */
// 	BITMASK32(0,0,1,0,1,1,1,0, 0,0,0,0,0,0,0,0,  /* c */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* d */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* e */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0)  /* f */
// };



// static const uint32_t		table_supported_opcode[] =
// {
// 	       /* 0 1 2 3 4 5 6 7  8 9 a b c d e f */
// 	BITMASK32(0,1,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 0 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 1 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,1,0,0,0,0,0,0,  /* 2 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 3 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 4 */
// 		  1,1,1,1,0,0,1,1, 1,0,0,0,0,0,0,1), /* 5 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* 6 */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 7 */
// 	BITMASK32(0,0,0,1,0,0,0,1, 0,1,0,1,0,0,0,0,  /* 8 */
// 		  1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* 9 */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* a */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* b */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* c */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0), /* d */
// 	BITMASK32(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  /* e */
// 		  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0)  /* f */
// };

#endif
