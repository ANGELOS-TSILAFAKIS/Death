
********************************************************************************
**                                                                            **
**                          x86 instructions encoding                         **
**                                                                            **
********************************************************************************


		      ** Instructions encoding overview **


       ####          ##           #          #         ####          ####
  |prefix bytes|  |opcode|  |MOD-REG-R/M|  |SIB|  |displacement|  |immediate|

  Although the diagram seems to imply that instructions can be up to 16 bytes
  long, the x86 will actually not allow instructions greater than 15 bytes
  in length.


  ------ prefix bytes ------

  size: 0 to 4 bytes
  usage: Special prefix value that affect the operation of the instruction.
  decomposition:

     bytes   0 or 1           0 or 1         0 or 1           0 or 1
     |instruction prefix| |address size| |operand size| |segment override|

  instruction prefix:
      Adjusts interpretation of the opcode.
      1. Lock prefix byte guarantees that instruction will have
         exclusive use of all shared memory, until the instruction
         completes execution.
             F0h: LOCK
      2. String manipulation instruction prefixes
             F3h: REP, REPE
             F2h: REPNE

  address size prefix/override:
      Changes size of address expected by the instruction.
      32-bit address could switch to 16-bit and vice versa.
          67h: 32-bit to 16-bit

  operand size prefix/override:
      Changes size of data expected by default mode of the instruction
      16-bit to 32-bit and vice versa.
          66h: 32-bit to 16-bit

  segment override:
      Causes memory access to use specified segment instead of default segment
      designated for instruction operand.
          2Eh: CS
          36h: SS
          3Eh: DS
          26h: ES
          64h: FS
          65h: GS


  ------ opcode ------

  size: 1 or 2 bytes
  usage: Instruction operation code
      (two bytes if he special 0Fh opcode expansion prefix is present).
  decomposition:

      bytes                0 or 1              1
                    |opcode expansion|opcode instruction|
                                               |
                                               v
                                       |i|x|x|x|x|x|d|s|
      bits                              7 6 5 4 3 2 1 0

  i:
      Immediate mode.
          0b: memory/register mode
          1b: immediate mode

  x:
      Operation code.

  d:
      Operation type.
          0b: register to memory
          1b: memory to register

  s:
      Operands size.
          0b: 8 bits
          1b: 16 or 32 bits


  ------ MOD-REG-R/M ------

  size: 1 byte (only required if the instruction supports register or
      memory operands)
  usage: Specifies addressing mode and instruction operand size.
      The MOD field combined with R/M field specifies either:
          1. the second operand in a two-operand instruction, or
          2. the only operand in a single-operand instruction like NOT or NEG.
      The "d" bit in the opcode determines which operand is the source,
      and which is the destination:
          0b: MOD R/M <- REG, REG is the source
          1b: REG <- MOD R/M, REG is the destination

  decomposition:

      bytes                      0 or 1
                             |MOD-REG-R/M|
                                   |
                                   v
                         | MOD |  REG  |  R/M  |
      bits                 7 6   5 4 3   2 1 0

  MOD:
      Specifies x86 addressing mode.
          00b: register indirect addressing mode
               or SIB when no displacement (when R/M=100)
               or displacement only addressing mode (when R/M=101)
          01b: one-byte signed displacement follow addressing mode byte(s)
          10b: four-byte signed displacement follow addressing mode byte(s)
          11b: register addressing mode

  REG:
      Specifies source or destination register combined with the opcode's
      "s" field to specify register size.
          000b: al || ax || eax
          001b: cl || cx || ecx
          010b: dl || dx || edx
          011b: bl || bx || ebx
          100b: ah || sp || esp
          101b: ch || bp || ebp
          110b: dh || si || esi
          111b: bh || di || edi


  ------ SIB (scaled index byte) ------

  size: 0 or 1
  usage: Optional if the instruction uses a scaled indexed memory
      addressing mode.
  decomposition:

      bytes                       0 or 1
                                  |SIB|
                                    |
                                    v
                           |scale| index | base |
      bits                   7 6   5 4 3   2 1 0

  scale: ???
          00b: index*1
          01b: index*2
          10b: index*4
          11b: index*8

  index:
      Select the index register.
          000b: eax
          001b: ecx
          010b: edx
          011b: ebx
          100b: illegal
          101b: ebp
          110b: esi
          111b: edi

  base:
      Select the base register.
          000b: eax
          001b: ecx
          010b: edx
          011b: ebx
          100b: esp
          101b: displacement-only if MOD=00b, ebp if MOD=01b or 10b
          110b: esi
          111b: edi

  ------ displacement ------

  size: 0, 1, 2 or 4 bytes
  usage: Specifies memory address displacement for the instruction.
  decomposition:

      bytes                     0, 1, 2, or 4
             |displacement|displacement|displacement|displacement|



  ------ immediate ------

  size: 0, 1, 2 or 4 bytes
  usage: Immediate (constant) value if the instruction has an immediate operand.
  decomposition:

      bytes                    0, 1, 2, or 4
                  |immediate|immediate|immediate|immediate|



                    ** Examples with "add" instruction **


  ------ add cl, al ------

                  |0|0|0|0|0|0|0|0|  |1|1|0|0|0|0|0|1|
                  |i|x x x x x|d|s|  |MOD| REG | R/M |

  i: immediate mode (disabled)
  x: "add" instruction
  d: adding REG field to R/M field
  s: adding 8 bits values together
  MOD: R/M field is a register
  REG: along with the "d" bit indicates that source field is "al"
  R/M: destination field is "cl"

  => add cl, al = 00 C1

  ------ add ecx, eax ------

                  |0|0|0|0|0|0|0|1|  |1|1|0|0|0|0|0|1|
                  |i|x x x x x|d|s|  |MOD| REG | R/M |

  i: immediate mode (disabled)
  x: "add" instruction
  d: adding REG field to R/M field
  s: adding 32 bits values together
  MOD: R/M field is a register
  REG: along with the "d" bit indicates that source field is "eax"
  R/M: destination field is "ecx"

  => add cl, al = 01 C1

  ------ add edx, displacement ------

              |0|0|0|0|0|0|1|1|  |0|0|0|1|1|1|0|1|  |......|
              |i|x x x x x|d|s|  |MOD| REG | R/M |  |disp32|

  i: immediate mode (disabled)
  x: "add" instruction
  d: adding R/M field to REG field
  s: adding 32 bits values together
  MOD: along with the "R/M" bits indicates displacement-only addressing mode
  REG: along with the "d" bit indicates that destination field is "edx"
  R/M: along with the "MOD" bits indicates displacement-only addressing mode
  disp32: 32 bit displacement

  => add edx, displacement = 03 1D ww xx yy zz

  note: ww, xx, yy, zz representing the 4 byte displacement with
        ww as L.O. byte and zz H.O. byte.

  ------ add edi, [ebx] ------

                   |0|0|0|0|0|0|1|1|  |0|0|1|1|1|0|1|1|
                   |i|x x x x x|d|s|  |MOD| REG | R/M |

  i: immediate mode (disabled)
  x: "add" instruction
  d: adding R/M field to REG field
  s: adding 32 bits values together
  MOD: 0 byte displacement
  REG: along with the "d" bit indicates that destination field is "edi"
  R/M: use of [ebx] addressing mode

  => add edi, [ebx] = 03 3B

  ------ add eax, [esi+disp8] ------

               |0|0|0|0|0|0|1|1|  |0|1|0|0|0|1|1|0|  |.....|
               |i|x x x x x|d|s|  |MOD| REG | R/M |  |disp8|

  i: immediate mode (disabled)
  x: "add" instruction
  d: adding R/M field to REG field
  s: adding 32-bits values together
  MOD: 1 byte displacement
  REG: along with the "d" bit indicates that destination field is "eax"
  R/M: use of [esi] addressing mode
  disp8: 8-bit displacement

  => add eax, [esi+disp8] = 03 3B

  ------ add ebx, [ebp+disp32] ------

              |0|0|0|0|0|0|1|1|  |1|0|0|1|1|1|0|1|  |......|
              |i|x x x x x|d|s|  |MOD| REG | R/M |  |disp32|

  i: immediate mode (disabled)
  x: "add" instruction
  d: adding R/M field to REG field
  s: adding 32 bits values together
  MOD: 4 bytes displacement
  REG: along with the "d" bit indicates that destination field is "ebx"
  R/M: use of [ebp] addressing mode
  disp32: 32-bit displacement

  => add ebx, [ebp+disp32] = 03 9D ww xx yy zz

  note: ww, xx, yy, zz representing the 4 byte displacement with
        ww as L.O. byte and zz H.O. byte.

  ------ add ebp, [disp32+eax*1] ------

       |0|0|0|0|0|0|1|1|  |0|0|1|0|1|1|0|0|  |0|0|0|0|0|1|0|1|  |......|
       |i|x x x x x|d|s|  |MOD| REG | R/M |  |scl|index|base |  |disp32|

  i: immediate mode (disabled)
  x: "add" instruction
  d: adding R/M field to REG field
  s: adding 32 bits values together
  MOD: SIB when no displacement (disp32+reg*1 mode)
  REG: along with the "d" bit indicates that destination field is "ebp"
  R/M: (disp32+reg*1 mode)
  scl: select eax*1 scaled index mode
  index: select eax*1 scaled index mode
  base: displacement-only addressing mode
  disp8: 32 bit displacement

  => add ebp, [disp32+eax*1] = 03 2C 05 ww xx yy zz

  note: ww, xx, yy, zz representing the 4 byte displacement with
        ww as L.O. byte and zz H.O. byte.

  ------ add ecx, [ebx+edi*4] ------

          |0|0|0|0|0|0|1|1|  |0|0|0|0|1|1|0|0|  |1|0|1|1|1|0|1|1|
          |i|x x x x x|d|s|  |MOD| REG | R/M |  |scl|index|base |

  i: immediate mode (disabled)
  x: "add" instruction
  d: adding R/M field to REG field
  s: adding 32 bits values together
  MOD: SIB mode
  REG: along with the "d" bit indicates that destination field is "ecx"
  R/M: SIB mode
  scl: select edi*4 scaled index mode
  index: select edi*4 scaled index mode
  base: "ebx" as base

  => add ecx, [ebx+edi*4] = 03 0C BB

  ------ add immediate ------

  MOD-REG-R/M and SIB bytes have no bit combinations to specify
  an immediate operand.
  Instead, x86 uses a entirely different instruction format to specify
  instruction with an immediate operand.
  There are three rules that apply:
      1. if opcode high-order bit set to 1, then instruction has
         an immediate constant.
      2. there is no direction bit in the opcode:
           * destination operand is always the location encoded in
             the MOD-R/M bits of the the MOD-REG-R/M byte
           * in place of the direction bit "d", the opcode has a sign extension
             "e" bit instead:
           - this little x trick often makes programs shorter, because adding
             small-value constants to 16 or 32 bit operands is very common
           - for 8-bit operands, the CPU ignores x bit
           - for 16-bit and 32-bit operands, x bit specifies the size of
             the Constant following at the end of the instruction:
             - if x bit contains zero, the Constant is the same size as
               the operand (i.e., 16 or 32 bits)
             - if x bit contains one, the Constant is a signed 8-bit value,
               and the CPU sign-extends this value to the appropriate size
               before adding it to the operand
      3. meaning of the REG field in the MOD-REG-R/M byte:
           * since the instruction implies that:
           - the source operand is a constant, and
           - MOD-R/M fields specify the destination operand,
           the instruction does not need to use the REG field to
           specify an operand
           * instead, the x86 CPU uses these three bits as an opcode extension
           * for the ADD-immediate instruction the REG bits must contain zero
           * other bit patterns would correspond to a different instruction.

  note: When adding a constant to a memory location, the displacement
        (if any) immediately precedes the immediate (constant) value
        in the opcode sequence.

    |1|0|0|0|0|0|d|s|  |0|0|0|0|1|1|0|0|  |1|0|1|1|1|0|1|1|  |...|  |.....|
    |i|x x x x x|d|s|  |MOD| REG | R/M |  |scl|index|base |  |SIB|  |const|

  i: immediate mode
  x: "add" instruction
  d: 0 = the constant is the same size as specified by "s" field | 1 = the constant is the same size as specified by "s" field
  s: 0 = 8bits operand | 1 = 32bits operands
  MOD: usual MOD-R/M meaning and specify destination operand
  REG: opcode extension, 000b for ADD immediate
  R/M: usual MOD-R/M meaning and specify destination operand
  SIB: optional 1 or 2 byte displacement (as specified by MOD-R/M)
  const: 8, 16 or 32 bit constant


                 ** instructions encoding values summary **


  ------------------------------------------------------------------------------
  |                                                                            |
  |                                prefix bytes                                |
  |                                                                            |
  |----------------------------------------------------------------------------|
  | bit range |       field        |      value(s)     |        meaning        |
  |----------------------------------------------------------------------------|
  |                           instruction prefix byte                          |
  |----------------------------------------------------------------------------|
  |    7-0    | instruction prefix |        F0h        |         LOCK          |
  |----------------------------------------------------------------------------|
  |    ///    |        ///         |        F3h        |       REP, REPE       |
  |----------------------------------------------------------------------------|
  |    ///    |        ///         |        F2h        |         REPNE         |
  |----------------------------------------------------------------------------|
  |                              address size byte                             |
  |----------------------------------------------------------------------------|
  |    7-0    |    address size    |        67h        |    32-bit to 16-bit   |
  |----------------------------------------------------------------------------|
  |                              operand size byte                             |
  |----------------------------------------------------------------------------|
  |    7-0    |    operand size    |        66h        |    32-bit to 16-bit   |
  |----------------------------------------------------------------------------|
  |                            segment override byte                           |
  |----------------------------------------------------------------------------|
  |    7-0    |  segment override  |        2Eh        |          CS           |
  |----------------------------------------------------------------------------|
  |    ///    |        ///         |        36h        |          SS           |
  |----------------------------------------------------------------------------|
  |    ///    |        ///         |        3Eh        |          DS           |
  |----------------------------------------------------------------------------|
  |    ///    |        ///         |        26h        |          ES           |
  |----------------------------------------------------------------------------|
  |    ///    |        ///         |        64h        |          FS           |
  |----------------------------------------------------------------------------|
  |    ///    |        ///         |        65h        |          GS           |
  ------------------------------------------------------------------------------



  ------------------------------------------------------------------------------
  |                                                                            |
  |                                   opcode                                   |
  |                                                                            |
  |----------------------------------------------------------------------------|
  | bit range |       field        |      value(s)     |        meaning        |
  |----------------------------------------------------------------------------|
  |                           opcode expansion byte                            |
  |----------------------------------------------------------------------------|
  |    7-0    |  opcode expansion  |        0Fh        |           x           |
  |----------------------------------------------------------------------------|
  |                          opcode instruction byte                           |
  |----------------------------------------------------------------------------|
  |     7     |   immediate mode   |         0b        | memory/register mode  |
  |----------------------------------------------------------------------------|
  |    ///    |        ///         |         1b        |    immediate mode     |
  |----------------------------------------------------------------------------|
  |    6-2    |       opcode       |         ??        |    operation code     |
  |----------------------------------------------------------------------------|
  |     1     |   operation type   |         0b        |  register to memory   |
  |----------------------------------------------------------------------------|
  |    ///    |        ///         |         1b        |  memory to register   |
  |----------------------------------------------------------------------------|
  |     0     |   operation size   |         0b        |        8 bits         |
  |----------------------------------------------------------------------------|
  |     0     |   operation size   |         1b        |     16 or 32 bits     |
  ------------------------------------------------------------------------------



  ------------------------------------------------------------------------------
  |                                                                            |
  |                                MOD-REG-R/M                                 |
  |                                                                            |
  |----------------------------------------------------------------------------|
  | bit range |       field        |      value(s)     |        meaning        |
  |----------------------------------------------------------------------------|
  |                               MOD-REG-R/M byte                             |
  |----------------------------------------------------------------------------|
  |    7-6    |        MOD        |        00b        |   RIA, SIB or disp.    |
  |----------------------------------------------------------------------------|
  |    ///    |        ///        |        01b        | one-byte signed disp.  |
  |----------------------------------------------------------------------------|
  |    ///    |        ///        |        10b        | four-byte signed disp. |
  |----------------------------------------------------------------------------|
  |    ///    |        ///        |        11b        |  register addressing   |
  |----------------------------------------------------------------------------|
  |    5-3    |        REG        |        000b       |    al || ax || eax     |
  |----------------------------------------------------------------------------|
  |    ///    |        ///        |        001b       |    cl || cx || ecx     |
  |----------------------------------------------------------------------------|
  |    ///    |        ///        |        010b       |    dl || dx || edx     |
  |----------------------------------------------------------------------------|
  |    ///    |        ///        |        011b       |    bl || bx || ebx     |
  |----------------------------------------------------------------------------|
  |    ///    |        ///        |        100b       |    ah || sp || esp     |
  |----------------------------------------------------------------------------|
  |    ///    |        ///        |        101b       |    ch || bp || ebp     |
  |----------------------------------------------------------------------------|
  |    ///    |        ///        |        110b       |    dh || si || esi     |
  |----------------------------------------------------------------------------|
  |    ///    |        ///        |        111b       |    bh || di || edi     |
  |----------------------------------------------------------------------------|
  |    2-0    |        R/M        |         ??        |    ~ same as REG ?     |
  ------------------------------------------------------------------------------



  ------------------------------------------------------------------------------
  |                                                                            |
  |                           scaled index byte (SIB)                          |
  |                                                                            |
  |----------------------------------------------------------------------------|
  | bit range |       field        |      value(s)     |        meaning        |
  |----------------------------------------------------------------------------|
  |                             scaled index byte                              |
  |----------------------------------------------------------------------------|
  |    7-6    |       scale        |        00b        |      index * 1        |
  |----------------------------------------------------------------------------|
  |    ///    |        ///         |        01b        |      index * 2        |
  |----------------------------------------------------------------------------|
  |    ///    |        ///         |        10b        |      index * 4        |
  |----------------------------------------------------------------------------|
  |    ///    |        ///         |        11b        |      index * 8        |
  |----------------------------------------------------------------------------|
  |    5-3    |       index        |        000b       |         eax           |
  |----------------------------------------------------------------------------|
  |    ///    |        ///         |        001b       |         ecx           |
  |----------------------------------------------------------------------------|
  |    ///    |        ///         |        010b       |         edx           |
  |----------------------------------------------------------------------------|
  |    ///    |        ///         |        011b       |         ebx           |
  |----------------------------------------------------------------------------|
  |    ///    |        ///         |        100b       |        illegal        |
  |----------------------------------------------------------------------------|
  |    ///    |        ///         |        101b       |         ebp           |
  |----------------------------------------------------------------------------|
  |    ///    |        ///         |        110b       |         esi           |
  |----------------------------------------------------------------------------|
  |    ///    |        ///         |        111b       |         edi           |
  |----------------------------------------------------------------------------|
  |    0-2    |        base        |        000b       |         eax           |
  |----------------------------------------------------------------------------|
  |    ///    |        ///         |        001b       |         ecx           |
  |----------------------------------------------------------------------------|
  |    ///    |        ///         |        010b       |         edx           |
  |----------------------------------------------------------------------------|
  |    ///    |        ///         |        011b       |         ebx           |
  |----------------------------------------------------------------------------|
  |    ///    |        ///         |        100b       |         esp           |
  |----------------------------------------------------------------------------|
  |    ///    |        ///         |        101b       |   disp.-only || ebp   |
  |----------------------------------------------------------------------------|
  |    ///    |        ///         |        110b       |         esi           |
  |----------------------------------------------------------------------------|
  |    ///    |        ///         |        111b       |         edi           |
  ------------------------------------------------------------------------------



  ------------------------------------------------------------------------------
  |                                                                            |
  |                                 displacement                               |
  |                                                                            |
  |----------------------------------------------------------------------------|
  | bit range |       field        |      value(s)     |        meaning        |
  |----------------------------------------------------------------------------|
  |                              displacement byte                             |
  |----------------------------------------------------------------------------|
  |    7-0    |    displacement    |     arbitrary     |    size-bit value     |
  |----------------------------------------------------------------------------|
  |                              displacement byte                             |
  |----------------------------------------------------------------------------|
  |    7-0    |    displacement    |     arbitrary     |    size-bit value     |
  |----------------------------------------------------------------------------|
  |                              displacement byte                             |
  |----------------------------------------------------------------------------|
  |    7-0    |    displacement    |     arbitrary     |    size-bit value     |
  |----------------------------------------------------------------------------|
  |                              displacement byte                             |
  |----------------------------------------------------------------------------|
  |    7-0    |    displacement    |     arbitrary     |    size-bit value     |
  ------------------------------------------------------------------------------



  ------------------------------------------------------------------------------
  |                                                                            |
  |                                   immediate                                |
  |                                                                            |
  |----------------------------------------------------------------------------|
  | bit range |       field        |      value(s)     |        meaning        |
  |----------------------------------------------------------------------------|
  |                                immediate byte                              |
  |----------------------------------------------------------------------------|
  |    7-0    |      immediate     |     arbitrary     |    size-bit value     |
  |----------------------------------------------------------------------------|
  |                                immediate byte                              |
  |----------------------------------------------------------------------------|
  |    7-0    |      immediate     |     arbitrary     |    size-bit value     |
  |----------------------------------------------------------------------------|
  |                                immediate byte                              |
  |----------------------------------------------------------------------------|
  |    7-0    |      immediate     |     arbitrary     |    size-bit value     |
  |----------------------------------------------------------------------------|
  |                                immediate byte                              |
  |----------------------------------------------------------------------------|
  |    7-0    |      immediate     |     arbitrary     |    size-bit value     |
  ------------------------------------------------------------------------------
